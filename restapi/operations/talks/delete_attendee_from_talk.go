// Code generated by go-swagger; DO NOT EDIT.

package talks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteAttendeeFromTalkHandlerFunc turns a function with the right signature into a delete attendee from talk handler
type DeleteAttendeeFromTalkHandlerFunc func(DeleteAttendeeFromTalkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAttendeeFromTalkHandlerFunc) Handle(params DeleteAttendeeFromTalkParams) middleware.Responder {
	return fn(params)
}

// DeleteAttendeeFromTalkHandler interface for that can handle valid delete attendee from talk params
type DeleteAttendeeFromTalkHandler interface {
	Handle(DeleteAttendeeFromTalkParams) middleware.Responder
}

// NewDeleteAttendeeFromTalk creates a new http.Handler for the delete attendee from talk operation
func NewDeleteAttendeeFromTalk(ctx *middleware.Context, handler DeleteAttendeeFromTalkHandler) *DeleteAttendeeFromTalk {
	return &DeleteAttendeeFromTalk{Context: ctx, Handler: handler}
}

/*DeleteAttendeeFromTalk swagger:route DELETE /talks/{id}/attendees/{aid} talks deleteAttendeeFromTalk

Deletes a Talk with specific ID

*/
type DeleteAttendeeFromTalk struct {
	Context *middleware.Context
	Handler DeleteAttendeeFromTalkHandler
}

func (o *DeleteAttendeeFromTalk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteAttendeeFromTalkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
