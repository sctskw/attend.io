// Code generated by go-swagger; DO NOT EDIT.

package attendees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAttendeeByHandlerFunc turns a function with the right signature into a get attendee by handler
type GetAttendeeByHandlerFunc func(GetAttendeeByParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAttendeeByHandlerFunc) Handle(params GetAttendeeByParams) middleware.Responder {
	return fn(params)
}

// GetAttendeeByHandler interface for that can handle valid get attendee by params
type GetAttendeeByHandler interface {
	Handle(GetAttendeeByParams) middleware.Responder
}

// NewGetAttendeeBy creates a new http.Handler for the get attendee by operation
func NewGetAttendeeBy(ctx *middleware.Context, handler GetAttendeeByHandler) *GetAttendeeBy {
	return &GetAttendeeBy{Context: ctx, Handler: handler}
}

/*GetAttendeeBy swagger:route GET /attendee attendees getAttendeeBy

GetAttendeeBy get attendee by API

*/
type GetAttendeeBy struct {
	Context *middleware.Context
	Handler GetAttendeeByHandler
}

func (o *GetAttendeeBy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAttendeeByParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
